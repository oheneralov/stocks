import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plts

# Generate dummy data for the last 7 days
data = {
    'prices': [100, 102, 105, 107, 110, 108, 109]
}
df = pd.DataFrame(data)

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df)

# Prepare the data for the LSTM model
X_train = []
y_train = []
for i in range(7):
    X_train.append(scaled_data[i, 0])
    y_train.append(scaled_data[i, 0])

X_train = np.array(X_train)
y_train = np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], 1, 1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(1, 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=1, verbose=2)

# Predict the prices for the next 7 days
predicted_prices = []
last_price = scaled_data[-1, 0]
for _ in range(7):
    input_data = np.array([[last_price]])
    input_data = np.reshape(input_data, (1, 1, 1))
    predicted_price = model.predict(input_data)
    predicted_prices.append(predicted_price[0, 0])
    last_price = predicted_price[0, 0]

# Inverse transform the predicted prices to get the actual values
predicted_prices = scaler.inverse_transform(np.array(predicted_prices).reshape(-1, 1))

# Plot the actual and predicted prices
plt.figure(figsize=(10, 6))
plt.plot(df['prices'], color='blue', label='Actual Prices')
plt.plot(range(len(df), len(df) + 7), predicted_prices, color='red', label='Predicted Prices')
plt.title('Stock Prices Prediction')
plt.xlabel('Days')
plt.ylabel('Prices')
plt.legend()
plt.show()
print("Predicted prices for the next 7 days:", predicted_prices.flatten())
